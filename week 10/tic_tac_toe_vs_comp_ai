import math

def display_board(board):
    """Display the current board state."""
    print("\n")
    print(f" {board[0]} | {board[1]} | {board[2]} ")
    print("---+---+---")
    print(f" {board[3]} | {board[4]} | {board[5]} ")
    print("---+---+---")
    print(f" {board[6]} | {board[7]} | {board[8]} ")
    print("\n")

def check_win(board, player):
    """Return True if the player has won."""
    win_conditions = [
        (0, 1, 2), (3, 4, 5), (6, 7, 8),  # rows
        (0, 3, 6), (1, 4, 7), (2, 5, 8),  # columns
        (0, 4, 8), (2, 4, 6)              # diagonals
    ]
    return any(board[a] == board[b] == board[c] == player for a, b, c in win_conditions)

def check_tie(board):
    """Return True if the board is full and there is no winner."""
    return all(spot in ['X', 'O'] for spot in board)

def get_player_move(board):
    """Prompt the player until a valid move is entered."""
    while True:
        try:
            move = int(input("Your move (choose a number 1-9): "))
            if move < 1 or move > 9:
                print("Invalid move! Choose a number between 1 and 9.")
            elif board[move - 1] in ['X', 'O']:
                print("Spot already taken. Try another.")
            else:
                return move
        except ValueError:
            print("Invalid input! Enter a number.")

def minimax(board, depth, is_maximizing):
    """
    AI uses the Minimax algorithm to find the optimal move.
    
    - If 'X' wins: return score +10
    - If 'O' wins: return score -10
    - If tie: return score 0
    - Otherwise, recursively evaluate all moves.
    """
    human, computer = 'X', 'O'

    if check_win(board, computer):
        return 10 - depth  # Favor quicker victories
    if check_win(board, human):
        return depth - 10  # Favor delaying loss
    if check_tie(board):
        return 0  # Tie gives neutral score
    
    if is_maximizing:  # AI's turn ('O')
        best_score = -math.inf
        for i, spot in enumerate(board):
            if spot not in ['X', 'O']:  # Only empty spots
                board[i] = computer
                score = minimax(board, depth + 1, False)
                board[i] = str(i + 1)  # Undo move
                best_score = max(best_score, score)
        return best_score
    else:  # Human's turn ('X')
        best_score = math.inf
        for i, spot in enumerate(board):
            if spot not in ['X', 'O']:  # Only empty spots
                board[i] = human
                score = minimax(board, depth + 1, True)
                board[i] = str(i + 1)  # Undo move
                best_score = min(best_score, score)
        return best_score

def get_computer_move(board):
    """Find best move for AI using Minimax."""
    best_score = -math.inf
    best_move = None
    computer = 'O'

    for i, spot in enumerate(board):
        if spot not in ['X', 'O']:  # Only empty spots
            board[i] = computer
            score = minimax(board, 0, False)  # Start recursion
            board[i] = str(i + 1)  # Undo move
            if score > best_score:
                best_score = score
                best_move = i + 1  # Convert index to move number

    return best_move

def tic_tac_toe_single_player():
    """Main game loop: Human ('X') vs. AI ('O')."""
    board = [str(i) for i in range(1, 10)]
    human, computer = 'X', 'O'
    current_player = human  # Human goes first

    while True:
        display_board(board)
        
        if current_player == human:
            move = get_player_move(board)
        else:
            move = get_computer_move(board)
            print(f"Computer chooses: {move}")
        
        board[move - 1] = current_player
        
        if check_win(board, current_player):
            display_board(board)
            print(f"{'You win!' if current_player == human else 'Computer wins!'}")
            break
        if check_tie(board):
            display_board(board)
            print("It's a tie!")
            break
        
        current_player = computer if current_player == human else human  # Switch turns

if __name__ == "__main__":
    tic_tac_toe_single_player()